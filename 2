#include <stdio.h>
#include "utils.h"

int main() {
	int n, m;
	double **mat;
	init_mat(mat, n, m);
	double y[n];
	init_vec(y, n);

	lupdec(mat, y, n, m);
	return 0;
}

double** lupdec(double** mat, double *y, int r, int c)
{
	double **ans_l, **ans_u;
	bool **p;
	for (int i = 0; i < r; ++i) {
		for (int j = 0; j < c; ++j) {
			ans_l[i][j] = 0.0;
			ans_r[i][j] = 0.0;
		}
	}
	for (int i = 0; i < r; ++i) {
		for (int j = 0; j < c; ++j) {
			if (i == j) p[i][j] = 1;
			else p[i][j] = 0;
		}
	}

	for (int i=0; i<r; ++i) {
		for (int j=0; j<c; ++j) {
			double pivot_index = max(*mat[j], r);
			swap(*mat[i], *mat[pivot_index]);
			// store in p matrix
			p[i][i] = 0; p[pivot_index][pivot_index] = 0;
			p[i][pivot_index] = 1; p[pivot_index][i] = 1;

			double temp[c];
			for (int k=i+1; k < r; ++k) {
				double pivot = 1/matrix[k][j];
				ans_l[k][j] = pivot;
				temp[j] = matrix[i][j]*pivot;
				ans_r[k][j] = temp[j] - matrix[k][j];
			}
		}
	}
	return ans;
}

double max(double *vector, int s)
{
	double t_max = 0;
	for (int i=0; i < s; ++i)
		if (vector[i] > t_max) t_max = vector[i];
	return t_max;
}

double swap(double *a, double *b, int s)
{
	for(int i = 0; i < s; ++i)
	{
		temp = a[i];
		a[i] = b[i];
		b[i] = temp;
	}
}

